import numpy as np # библиотеки с псведонимами
import matplotlib.pyplot as plt

def load_or_create_matrix(): #Вернет матрицу из текстового файла и кортеж с размерами массива
    """Загрузка матрицы из файла или создание тестовой/случайной"""
    try:
        A = np.loadtxt('matrix.txt', dtype=int) #загружает числа из файла. все элементы массива/матрицы должны быть целыми числами.
        N = A.shape[0] #возвращает кортеж с размерами массива по каждому измерению(i,j)
        if N % 2 != 0:
            print("Ошибка: матрица в файле должна быть четного размера!")
            exit() #немедленно завершает выполнение программы
        print("\nМатрица загружена из файла:", "\n", A)
        return A, N
    except Exception as e:
        print(f"Ошибка загрузки файла: {e}")
        exit()


# Основная программа
try:
    # 1. Инициализация матрицы
    A, N = load_or_create_matrix()
    K = int(input("\nВведите K: "))
    h = N // 2 #Половину размера матрицы для ее разделения на четыре равные части

    # 2. Разбиение на подматрицы
    E = A[:h, :h]  # Верхний левый
    B = A[:h, h:]  # Верхний правый
    D = A[h:, :h]  # Нижний левый
    C = A[h:, h:]  # Нижний правый
    print(f"E:\n{E}\nC:\n{C}\nB:\n{B}\nD:\n{D}")

    # 3. Формирование матрицы F
    F = A.copy()

    # Расчет критериев
    max_odd_cols = E[:, ::2].max()  # Максимум в нечетных столбцах (0,2...)
    print(f"Максимальный элемент в нечетных столбцах: {max_odd_cols}")
    sum_odd_rows = E[::2, :].sum()  # Сумма в нечетных строках (1,3...)
    print(f"Сумма чисел в нечетных строках: {sum_odd_rows}")

    condition = "Условие: \"в Е максимальный элемент в нечетных столбцах больше, чем сумма чисел в нечетных строках\""
    if (max_odd_cols > sum_odd_rows):
        print(f"{condition} прошло -> поменять местами С и В симметрично")
        F[:h, h:] = C[:, ::-1]  # Зеркально по горизонтали
        F[h:, h:] = B[::-1, :]  # Зеркально по вертикали
        print(f"Измененная F:\n{F}")
    else:
        print(f"{condition} не прошло -> В и Е поменять местами несимметрично")
        F[:h, :h] = B  # Замена E на B
        F[:h, h:] = E  # Замена B на E
        print(f"\nИзмененная F:\n{F}")

    # 4. Вычисление результата
    det_A = np.linalg.det(A) # линейная алгебра. Вычисляет определитель (детерминант)
    G = np.tril(A)  # Нижняя треугольная матрица

    sum_diag_F = np.trace(F) # Сумму элементов только главной диагонали

    print(f"\nОпределитель A: {det_A:.2f}", f"\nСумма диагонали F: {sum_diag_F}")

    condition1 = "Условие: \"Если определитель матрицы А больше суммы диагональных элементов матрицы F\" "
    if det_A > sum_diag_F:
        print(f"{condition1} прошло", "\n\nВычисляем: A⁻¹*Aᵀ - K*F⁻¹")
        A_inv = np.linalg.inv(A)
        F_inv = np.linalg.inv(F)
        R = A_inv @ A.T - K * F_inv #@ — оператор матричного умножения, A.T — транспонирование матрицы

        # Вывод промежуточных матриц
        print("\nA⁻¹:\n", A_inv, "\n\nAᵀ:\n", A.T, "\n\nF⁻¹:\n", F_inv)
    else:
        print(f"{condition1} не прошло", "\n\nВычисляем: (Aᵀ + G - Fᵀ)*K")
        R = (A.T + G - F.T) * K # G - нижняя треугольная матрица, полученная из А
        # Вывод промежуточных матриц
        print("\nAᵀ:\n", A.T, "\n\nG:\n", G, "\n\nFᵀ:\n", F.T)

    # 5. Вывод результатов
    print("\nИтоговая матрица F:", "\n", F, "\n\nРезультат вычислений R:", R)

    # 6. Визуализация
    plt.figure(figsize=(10, 5)) # Создаёт окно размером 10x5 дюймов

    plt.subplot(1, 3, 1) # 1-й график из 3 в строке
    plt.imshow(F, cmap='coolwarm') # Отображает матрицу как тепловую карту
    plt.colorbar() # Шкала значений для тепловой карты
    plt.title('Матрица F') # Заголовок

    plt.subplot(1, 3, 2) # 2-й график из 3
    plt.plot(F.mean(axis=1), 'b-') # График средних по строкам (синий цвет, сплошная линия)
    plt.grid()  # сетка
    plt.title('Средние по строкам F') # Заголовок

    plt.subplot(1, 3, 3) #3-й график из 3
    plt.hist(F.ravel(), bins=15, color='b') #Преобразует матрицу F в одномерный массив, Разбивает диапазон значений матрицы F на 15 интервалов, синий
    plt.title('Распределение значений F')
    plt.show()

except Exception as e:
    print(f"\nПроизошла ошибка: {e}")